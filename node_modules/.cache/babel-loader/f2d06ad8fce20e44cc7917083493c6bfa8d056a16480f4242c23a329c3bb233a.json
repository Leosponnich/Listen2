{"ast":null,"code":"import { db } from './firebase/firebase';\nimport { collection, getDocs, updateDoc, doc, addDoc } from 'firebase/firestore';\n\n// Update Firebase data for an existing user or create a new user if they don't exist\nexport const sendDataToFirebase = async data => {\n  try {\n    const usersCollection = collection(db, 'users');\n    console.log('Data to be updated or added:', data);\n    const querySnapshot = await getDocs(usersCollection);\n    const existingUser = querySnapshot.docs.find(doc => doc.data().userName === data.userName);\n    if (existingUser) {\n      const docRef = doc(usersCollection, existingUser.id);\n      await updateDoc(docRef, {\n        userSong: data.userSong,\n        songPreview: data.songPreview\n      });\n      console.log('Document updated for user:', data.userName);\n    } else {\n      const newDocRef = await addDoc(usersCollection, data);\n      console.log('New document created with id:', newDocRef.id);\n    }\n  } catch (error) {\n    console.error('Error updating or adding data in Firebase:', error);\n  }\n};\n\n//get data from firebase\nexport const fetchUsers = async () => {\n  try {\n    const userRef = collection(db, 'users');\n    const userQuerySnapshot = await getDocs(userRef);\n    const userDataArray = [];\n    userQuerySnapshot.forEach(doc => {\n      userDataArray.push(doc.data());\n    });\n    return userDataArray;\n    console.log(userList);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};","map":{"version":3,"names":["db","collection","getDocs","updateDoc","doc","addDoc","sendDataToFirebase","data","usersCollection","console","log","querySnapshot","existingUser","docs","find","userName","docRef","id","userSong","songPreview","newDocRef","error","fetchUsers","userRef","userQuerySnapshot","userDataArray","forEach","push","userList"],"sources":["/Users/leosponnich/Documents/firebase_test/src/firebase/firebaseFunctions.js"],"sourcesContent":["import {db} from './firebase/firebase';\nimport {collection, getDocs, updateDoc, doc, addDoc} from 'firebase/firestore';\n\n\n// Update Firebase data for an existing user or create a new user if they don't exist\nexport const sendDataToFirebase = async (data) => {\n    try {\n      const usersCollection = collection(db, 'users');\n      console.log('Data to be updated or added:', data);\n  \n      const querySnapshot = await getDocs(usersCollection);\n      const existingUser = querySnapshot.docs.find((doc) => doc.data().userName === data.userName);\n  \n      if (existingUser) {\n        const docRef = doc(usersCollection, existingUser.id);\n        await updateDoc(docRef, {\n          userSong: data.userSong,\n          songPreview: data.songPreview,\n        });\n        console.log('Document updated for user:', data.userName);\n      } else {\n        const newDocRef = await addDoc(usersCollection, data);\n        console.log('New document created with id:', newDocRef.id);\n      }\n    } catch (error) {\n      console.error('Error updating or adding data in Firebase:', error);\n    }\n  };\n  \n\n    //get data from firebase\n    export const fetchUsers = async () => {\n        try {\n          const userRef = collection(db, 'users');\n          const userQuerySnapshot = await getDocs(userRef);\n    \n          const userDataArray = [];\n          userQuerySnapshot.forEach((doc) => {\n            userDataArray.push(doc.data());\n          });\n    \n          return userDataArray;\n          console.log(userList);\n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      };\n"],"mappings":"AAAA,SAAQA,EAAE,QAAO,qBAAqB;AACtC,SAAQC,UAAU,EAAEC,OAAO,EAAEC,SAAS,EAAEC,GAAG,EAAEC,MAAM,QAAO,oBAAoB;;AAG9E;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACF,MAAMC,eAAe,GAAGP,UAAU,CAACD,EAAE,EAAE,OAAO,CAAC;IAC/CS,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,IAAI,CAAC;IAEjD,MAAMI,aAAa,GAAG,MAAMT,OAAO,CAACM,eAAe,CAAC;IACpD,MAAMI,YAAY,GAAGD,aAAa,CAACE,IAAI,CAACC,IAAI,CAAEV,GAAG,IAAKA,GAAG,CAACG,IAAI,CAAC,CAAC,CAACQ,QAAQ,KAAKR,IAAI,CAACQ,QAAQ,CAAC;IAE5F,IAAIH,YAAY,EAAE;MAChB,MAAMI,MAAM,GAAGZ,GAAG,CAACI,eAAe,EAAEI,YAAY,CAACK,EAAE,CAAC;MACpD,MAAMd,SAAS,CAACa,MAAM,EAAE;QACtBE,QAAQ,EAAEX,IAAI,CAACW,QAAQ;QACvBC,WAAW,EAAEZ,IAAI,CAACY;MACpB,CAAC,CAAC;MACFV,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEH,IAAI,CAACQ,QAAQ,CAAC;IAC1D,CAAC,MAAM;MACL,MAAMK,SAAS,GAAG,MAAMf,MAAM,CAACG,eAAe,EAAED,IAAI,CAAC;MACrDE,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEU,SAAS,CAACH,EAAE,CAAC;IAC5D;EACF,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;EACpE;AACF,CAAC;;AAGC;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,MAAMC,OAAO,GAAGtB,UAAU,CAACD,EAAE,EAAE,OAAO,CAAC;IACvC,MAAMwB,iBAAiB,GAAG,MAAMtB,OAAO,CAACqB,OAAO,CAAC;IAEhD,MAAME,aAAa,GAAG,EAAE;IACxBD,iBAAiB,CAACE,OAAO,CAAEtB,GAAG,IAAK;MACjCqB,aAAa,CAACE,IAAI,CAACvB,GAAG,CAACG,IAAI,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,OAAOkB,aAAa;IACpBhB,OAAO,CAACC,GAAG,CAACkB,QAAQ,CAAC;EACvB,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}