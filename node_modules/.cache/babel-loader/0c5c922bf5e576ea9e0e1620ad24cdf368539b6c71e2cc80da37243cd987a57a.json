{"ast":null,"code":"// auth.js\n\nconst CLIENT_ID = 'feb8469a722140269123ab9f53988c75';\nconst CLIENT_SECRET = 'cea6f92ef79246b7b874921ddfbf82f8';\nconst URI = 'http://localhost:3000/';\nexport async function exchangeCodeForToken(authCode) {\n  const authParameters = new URLSearchParams();\n  authParameters.append('grant_type', 'authorization_code');\n  authParameters.append('code', authCode);\n  authParameters.append('redirect_uri', URI);\n  try {\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`\n      },\n      body: authParameters.toString()\n    });\n    if (!response.ok) {\n      console.error('Error exchanging code for access token. Status:', response.status);\n      throw new Error('Error exchanging code for access token');\n    }\n    const data = await response.json();\n    return {\n      accessToken: data.access_token,\n      expiresIn: data.expires_in,\n      refreshToken: data.refresh_token\n    };\n  } catch (error) {\n    console.error('Error exchanging code for access token:', error);\n    throw error;\n  }\n}\nexport async function refreshToken(refreshToken) {\n  const authParameters = new URLSearchParams();\n  authParameters.append('grant_type', 'refresh_token');\n  authParameters.append('refresh_token', refreshToken);\n  try {\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`\n      },\n      body: authParameters.toString()\n    });\n    if (!response.ok) {\n      console.error('Error refreshing token:', response.status);\n      throw new Error('Error refreshing token');\n    }\n    const data = await response.json();\n    return {\n      accessToken: data.access_token,\n      expiresIn: data.expires_in,\n      refreshToken: data.refresh_token\n    };\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["CLIENT_ID","CLIENT_SECRET","URI","exchangeCodeForToken","authCode","authParameters","URLSearchParams","append","response","fetch","method","headers","Authorization","btoa","body","toString","ok","console","error","status","Error","data","json","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token"],"sources":["/Users/leosponnich/Documents/firebase_test/src/spotify/auth/auth.js"],"sourcesContent":["// auth.js\n\nconst CLIENT_ID = 'feb8469a722140269123ab9f53988c75';\nconst CLIENT_SECRET = 'cea6f92ef79246b7b874921ddfbf82f8';\nconst URI = 'http://localhost:3000/';\n\nexport async function exchangeCodeForToken(authCode) {\n  const authParameters = new URLSearchParams();\n  authParameters.append('grant_type', 'authorization_code');\n  authParameters.append('code', authCode);\n  authParameters.append('redirect_uri', URI);\n\n  try {\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`,\n      },\n      body: authParameters.toString(),\n    });\n\n    if (!response.ok) {\n      console.error('Error exchanging code for access token. Status:', response.status);\n      throw new Error('Error exchanging code for access token');\n    }\n\n    const data = await response.json();\n    return {\n      accessToken: data.access_token,\n      expiresIn: data.expires_in,\n      refreshToken: data.refresh_token,\n    };\n  } catch (error) {\n    console.error('Error exchanging code for access token:', error);\n    throw error;\n  }\n}\n\nexport async function refreshToken(refreshToken) {\n  const authParameters = new URLSearchParams();\n  authParameters.append('grant_type', 'refresh_token');\n  authParameters.append('refresh_token', refreshToken);\n\n  try {\n    const response = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        Authorization: `Basic ${btoa(`${CLIENT_ID}:${CLIENT_SECRET}`)}`,\n      },\n      body: authParameters.toString(),\n    });\n\n    if (!response.ok) {\n      console.error('Error refreshing token:', response.status);\n      throw new Error('Error refreshing token');\n    }\n\n    const data = await response.json();\n    return {\n      accessToken: data.access_token,\n      expiresIn: data.expires_in,\n      refreshToken: data.refresh_token,\n    };\n  } catch (error) {\n    console.error('Error refreshing token:', error);\n    throw error;\n  }\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAG,kCAAkC;AACpD,MAAMC,aAAa,GAAG,kCAAkC;AACxD,MAAMC,GAAG,GAAG,wBAAwB;AAEpC,OAAO,eAAeC,oBAAoBA,CAACC,QAAQ,EAAE;EACnD,MAAMC,cAAc,GAAG,IAAIC,eAAe,CAAC,CAAC;EAC5CD,cAAc,CAACE,MAAM,CAAC,YAAY,EAAE,oBAAoB,CAAC;EACzDF,cAAc,CAACE,MAAM,CAAC,MAAM,EAAEH,QAAQ,CAAC;EACvCC,cAAc,CAACE,MAAM,CAAC,cAAc,EAAEL,GAAG,CAAC;EAE1C,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;MACrEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnDC,aAAa,EAAG,SAAQC,IAAI,CAAE,GAAEb,SAAU,IAAGC,aAAc,EAAC,CAAE;MAChE,CAAC;MACDa,IAAI,EAAET,cAAc,CAACU,QAAQ,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,iDAAiD,EAAEV,QAAQ,CAACW,MAAM,CAAC;MACjF,MAAM,IAAIC,KAAK,CAAC,wCAAwC,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;IAClC,OAAO;MACLC,WAAW,EAAEF,IAAI,CAACG,YAAY;MAC9BC,SAAS,EAAEJ,IAAI,CAACK,UAAU;MAC1BC,YAAY,EAAEN,IAAI,CAACO;IACrB,CAAC;EACH,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,MAAMA,KAAK;EACb;AACF;AAEA,OAAO,eAAeS,YAAYA,CAACA,YAAY,EAAE;EAC/C,MAAMtB,cAAc,GAAG,IAAIC,eAAe,CAAC,CAAC;EAC5CD,cAAc,CAACE,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC;EACpDF,cAAc,CAACE,MAAM,CAAC,eAAe,EAAEoB,YAAY,CAAC;EAEpD,IAAI;IACF,MAAMnB,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;MACrEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,mCAAmC;QACnDC,aAAa,EAAG,SAAQC,IAAI,CAAE,GAAEb,SAAU,IAAGC,aAAc,EAAC,CAAE;MAChE,CAAC;MACDa,IAAI,EAAET,cAAc,CAACU,QAAQ,CAAC;IAChC,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChBC,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEV,QAAQ,CAACW,MAAM,CAAC;MACzD,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3C;IAEA,MAAMC,IAAI,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;IAClC,OAAO;MACLC,WAAW,EAAEF,IAAI,CAACG,YAAY;MAC9BC,SAAS,EAAEJ,IAAI,CAACK,UAAU;MAC1BC,YAAY,EAAEN,IAAI,CAACO;IACrB,CAAC;EACH,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C,MAAMA,KAAK;EACb;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}