[{"/Users/leosponnich/Documents/firebase_test/src/index.js":"1","/Users/leosponnich/Documents/firebase_test/src/App.js":"2","/Users/leosponnich/Documents/firebase_test/src/reportWebVitals.js":"3","/Users/leosponnich/Documents/firebase_test/src/pages/login/login.js":"4","/Users/leosponnich/Documents/firebase_test/src/pages/display/display.jsx":"5","/Users/leosponnich/Documents/firebase_test/src/spotify/api/api.js":"6","/Users/leosponnich/Documents/firebase_test/src/firebase/firebaseFunctions.js":"7","/Users/leosponnich/Documents/firebase_test/src/spotify/auth/auth.js":"8","/Users/leosponnich/Documents/firebase_test/src/pages/floating/floating.jsx":"9","/Users/leosponnich/Documents/firebase_test/src/firebase/firebase.js":"10"},{"size":211,"mtime":1695222980743,"results":"11","hashOfConfig":"12"},{"size":587,"mtime":1695222980743,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1695222886179,"results":"14","hashOfConfig":"12"},{"size":1317,"mtime":1695223478016,"results":"15","hashOfConfig":"12"},{"size":6278,"mtime":1695222980743,"results":"16","hashOfConfig":"12"},{"size":808,"mtime":1695222980744,"results":"17","hashOfConfig":"12"},{"size":1649,"mtime":1695222980743,"results":"18","hashOfConfig":"12"},{"size":2140,"mtime":1695223467105,"results":"19","hashOfConfig":"12"},{"size":2036,"mtime":1695222980743,"results":"20","hashOfConfig":"12"},{"size":909,"mtime":1695222980743,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"zh0jpv",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"25"},"/Users/leosponnich/Documents/firebase_test/src/index.js",[],[],[],"/Users/leosponnich/Documents/firebase_test/src/App.js",[],[],"/Users/leosponnich/Documents/firebase_test/src/reportWebVitals.js",[],[],"/Users/leosponnich/Documents/firebase_test/src/pages/login/login.js",[],[],"/Users/leosponnich/Documents/firebase_test/src/pages/display/display.jsx",["55","56"],[],"import React, { useEffect, useState } from 'react';\nimport FloatingComponent from '../floating/floating';\nimport Dialog from '@mui/material/Dialog';\nimport './display.css';\nimport { exchangeCodeForToken, refreshhToken } from '../../spotify/auth/auth'; // Import token handling functions\nimport {fetchUserInfo, fetchNowPlaying} from '../../spotify/api/api';\nimport {sendDataToFirebase, fetchUsersFromFirebase} from '../../firebase/firebaseFunctions';\n\nfunction Display(props) {\n    //Dialog\n    const [selectedData, setSelectedData] = useState(null);\n    const [open, setOpen] = useState(false);\n\n    //tokens\n    const [accessToken, setAccessToken] = useState(null);\n    const [expiresIn, setExpiresIn] = useState(null);\n    const [refreshToken, setRefreshToken] = useState(null);\n    const {authCode} = props;\n\n    //Userdata \n    const[user,setUser] = useState(null);\n    const[song, setSong] = useState(null);\n    const [userList, setUserList] = useState([]);\n   \n    //updating song when user changes\n    const [countdown, setCountdown] = useState(15);\n    const [first, setFirst] = useState(false);\n\n\n      //clock for refreshing userSong\n  useEffect(()=>{\n    const interval = setInterval(() => {\n      if(countdown>0){\n        setCountdown(countdown-1);\n      }\n      else{\n        clearInterval(interval);\n      }\n    },1000)\n    return () => {\n        clearInterval(interval);\n    };\n  },[countdown]);\n\n    \n\n  // Token exchange\n  useEffect(() => {\n    if (authCode) {\n      exchangeCodeForToken(authCode)\n        .then((data) => {\n          setAccessToken(data.accessToken);\n          setExpiresIn(data.expiresIn);\n          setRefreshToken(data.refreshToken);\n        })\n        .catch((error) => {\n          console.error('Error exchanging code for access token:', error);\n        });\n    }\n  }, [authCode]);\n\n\n    // Refreshing accessToken when access expires\n    useEffect(() => {\n      if (!expiresIn || !refreshToken) return;\n      const interval = setInterval(() => {\n        refreshhToken(refreshToken)\n          .then((data) => {\n            setAccessToken(data.accessToken);\n            setExpiresIn(data.expiresIn);\n            setRefreshToken(data.refreshToken);\n          })\n          .catch((error) => {\n            console.error('Error refreshing token:', error);\n          });\n      }, (expiresIn - 60) * 1000);\n    \n      return () => clearInterval(interval);\n    }, [expiresIn, refreshToken]);\n    \n  \n\n  useEffect(()=>{\n    if(!accessToken) return;\n    const runFetchUserInfo = () => {\n      fetchUserInfo(accessToken)\n      .then((res) => {\n        setUser(res);\n      })\n    }\n    runFetchUserInfo();\n    \n  },[accessToken]);\n\n\n  \n\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!accessToken || !user) return;\n  \n      try {\n        const res = await fetchNowPlaying(accessToken);\n        const isPlaying = res && res.item;\n\n        const artistNames = isPlaying ? res.item.artists.map((artist) => artist.name)\n        : [];\n  \n        const newObj = {\n          userSong: isPlaying ? res.item.name : \"No song playing\",\n          userImg: user.images[1].url,\n          userName: user.display_name,\n          songPreview: isPlaying ? res.item.preview_url : \"\",\n          albumImg: isPlaying? res.item.album.images[0].url : \"\",\n          artistName: artistNames.join(', ')\n        };\n  \n        setSong(isPlaying ? res : null);\n        sendDataToFirebase(newObj);\n      } catch (error) {\n        console.error('Error fetching currently playing song:', error);\n      }\n    };\n  \n    if (!first || countdown === 0) {\n      fetchUsers();\n      fetchData();\n      setFirst(true);\n      setCountdown(15);\n    }\n  }, [accessToken, countdown, user]);\n  \n\n  //Dialog handlers\n  const handleComponentClick = (data) => {\n    setSelectedData(data);\n    setOpen(true);\n  }\n\n  const handleCloseDialog = () => {\n    setOpen(false);\n    setSelectedData(null);\n  }\n\n  //fetching users from firebase\n  const fetchUsers = async () => {\n    const userDataArray = await fetchUsersFromFirebase();\n    setUserList(userDataArray);\n  };\n\n \n \n  return (\n  <div className=\"background\">\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <span></span>\n    <div>\n      {userList.length > 0 ? (\n        <div>\n          {userList.map((user, index) => (\n        <FloatingComponent\n          key={index} // Make sure to use a unique key for each component\n          data={{\n            userSong: user.userSong,\n            userImg: user.userImg,\n            userName: user.userName,\n            songPreview: user.songPreview,\n            albumImg: user.albumImg,\n            artistName: user.artistName\n          }}\n          onClick={handleComponentClick}\n        />\n      ))}\n    <Dialog\n      open={open}\n      onClose={handleCloseDialog}\n      PaperProps={{\n        sx:{\n          width:'100vw',\n          height:'80svh',\n          borderRadius:'10%'\n        }\n      }}\n      >\n      <div className='floating-body'>\n        <button className='exit-button' onClick={handleCloseDialog}>exit</button>\n        <div className='floating-body-rows'>\n        <div className='floating-body-column round-img'>\n            <img alt='profile' src={selectedData? selectedData.userImg : ''} className='profile-img'/>\n            <h2>{selectedData? selectedData.userName : ''}</h2>\n            <p>Is listening to...</p>\n        </div>\n        <div className='floating-body-column'>\n        <img alt='album' src={selectedData? selectedData.albumImg : ''} className='album-img'/>\n        <div className='floating-body-text'>\n        <h1>{selectedData? selectedData.userSong : ''}</h1>\n        <p>{selectedData? selectedData.artistName : \"\"}</p>\n        <audio src={selectedData? selectedData.songPreview : ''} controls autoPlay name='media' className='custom-audio'/>\n          </div>\n          </div>\n          </div>\n      </div>\n    </Dialog>\n        </div>\n      ) : (\n        <p className='loading'>Loading...</p>\n      )}\n    </div>\n  </div>\n  );\n}\n\nexport default Display;\n","/Users/leosponnich/Documents/firebase_test/src/spotify/api/api.js",[],[],"/Users/leosponnich/Documents/firebase_test/src/firebase/firebaseFunctions.js",[],[],"/Users/leosponnich/Documents/firebase_test/src/spotify/auth/auth.js",[],[],"/Users/leosponnich/Documents/firebase_test/src/pages/floating/floating.jsx",[],[],"/Users/leosponnich/Documents/firebase_test/src/firebase/firebase.js",["57"],[],"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {getFirestore} from 'firebase/firestore'\nimport { getAnalytics } from \"firebase/analytics\";\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB8ZDTt2Egg9awEh4Lhbrsl3jWldwGNPOk\",\n  authDomain: \"listen-4e25b.firebaseapp.com\",\n  projectId: \"listen-4e25b\",\n  storageBucket: \"listen-4e25b.appspot.com\",\n  messagingSenderId: \"289487682428\",\n  appId: \"1:289487682428:web:5240a0a7760fc0b32342f9\",\n  measurementId: \"G-RDDXWQLG7E\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\nconst analytics = getAnalytics(app);\n\nexport {db};",{"ruleId":"58","severity":1,"message":"59","line":22,"column":11,"nodeType":"60","messageId":"61","endLine":22,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":131,"column":6,"nodeType":"64","endLine":131,"endColumn":36,"suggestions":"65"},{"ruleId":"58","severity":1,"message":"66","line":23,"column":7,"nodeType":"60","messageId":"61","endLine":23,"endColumn":16},"no-unused-vars","'song' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'first'. Either include it or remove the dependency array.","ArrayExpression",["67"],"'analytics' is assigned a value but never used.",{"desc":"68","fix":"69"},"Update the dependencies array to be: [accessToken, countdown, first, user]",{"range":"70","text":"71"},[3659,3689],"[accessToken, countdown, first, user]"]